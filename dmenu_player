#!/usr/bin/env bash

# TODO - Repeat, criar pasta Dmenu_player se não exitir 

# pacmd set-sink-mute alsa_output.pci-0000_00_1b.0.analog-stereo 1 (mute)
# Dmenu_player cria um menu interativo para busca e interação básica com arquivos de música (dentro da pasta ~/Música/).
# Músicas que tenham o mesmo nome irão entrar em conflito , não tocando nenhuma delas - SOLUÇÃO renomear de forma diferente ;P

init_variables(){
	NOME_SCRIPT="${1##*/}"
	DMENU_PASTA="$HOME/.local/share/$NOME_SCRIPT"
	MUSICAS_PASTA="$HOME/Música/"
	# Arquivos usados
	LISTA_DE_MUSICAS="$DMENU_PASTA/lista_de_musicas_completa.dmenu"
	INDICE="$DMENU_PASTA/indice_playlist.dmenu"
	MODULO="$DMENU_PASTA/modulo.dmenu"
	PASTAS_COM_MUSICAS="$DMENU_PASTA/pastas_de_musicas.dmenu"
	# Keys
	KEY_DMENU_PLAYER_PLAY=p
	KEY_DMENU_PLAYER_STOP=s
	KEY_DMENU_PLAYER_KILL_MUSIC=x
	KEY_DMENU_PLAYER_NEXT=n
	KEY_DMENU_PLAYER_PREVIOUS=b
	KEY_DMENU_PLAYER_QUIT_PLAYLIST=q
	# Player utilizado
	PLAY=(mplayer -really-quiet)
	# Mostra título da música no Dmenu
	MUSICA_TOCANDO=$(pgrep -a "^${PLAY[0]}")
	# Identifica corretamente o ID do processo que pertence à música
	ID_MUSICA=${MUSICA_TOCANDO%% *}
}

run_dmenu(){
	dmenu_lines
	dmenu -i -f -l "$LINHAS"
}

dmenu_command_menu(){
	printf '%s\n' "$@" | run_dmenu
}

# Função que atualiza o arquivo das músicas
update_songs_list() {
	[[ ! -d $DMENU_PASTA ]] && mkdir "$DMENU_PASTA"
	# Captura todas as músicas nos formatos flac, ogg, mp3
	du -a "$MUSICAS_PASTA" | cut -f2 | grep --color=never ".flac\|.mp3\|.ogg\|.oga" > "$LISTA_DE_MUSICAS"
	# Captura todas as pastas dentro da pasta ~/Música/
	du "$MUSICAS_PASTA"* | cut -f2 > "$PASTAS_COM_MUSICAS"
}

redraw_statusbar(){
	polybar-msg hook music_playing 1
}

# $1=MUSICA
player() {
	redraw_statusbar
	"${PLAY[@]}" "$1"
}

reset_playlist_indice(){
	echo '1' > "$INDICE"
}

player_playlist(){
	local musicas=("$@")
	local num=0
	reset_playlist_indice
	while (( $num < ${#musicas[@]} ))
   	do
		player "${musicas[$num]}"
		# 0=false; other value=true
		if (( $(< "$INDICE") ))
		then
			((num++))
		else
			((num--))
			reset_playlist_indice
		fi
	done
}

# $1=ARQUIVO_LISTA; $2=MÓDULO
playlist_queue(){
	echo "$2" > "$MODULO"
	# Sempre observar a necessidade de usar IFS (valor padrão <space><tab><newline>) quando criar listas de comandos
	local IFS=$'\n'
	local array=($(shuf < "$1"))
	local choose=
	local songs=()
	if (( $2 ))
	then
		# Obtém música
		choose=$(dmenu_command_menu "Escolha uma música:" "${array[@]##*/}")
		# Se não for escolhida nenhuma música, encerrar o script
		[[ -z $choose ]] && exit 0
		songs+=($(grep --color=never "$choose$" "$1"))
		player "${songs[@]}"
	else
		# Obtém pasta com músicas
		choose=$(dmenu_command_menu "Escolha uma das pastas de música:" "${array[@]##*/}")
		# Se nenhuma playlist for escolhida, encerrar o script
		[[ -n $choose ]] && notify-send -t 6000 "${NOME_SCRIPT^^}" "Escutando músicas da pasta: $choose" || exit 0
		songs+=($(grep --color=never "$choose/" "$LISTA_DE_MUSICAS" | shuf))
		player_playlist "${songs[@]}"
	fi
	redraw_statusbar
}

# $1=WHAT_TO_KILL
# 0=false; other_value=true
process_kill(){
	if (( $1 ))
	then
		pkill -f "^${PLAY[0]}" &
	else
		pkill -f "^${PLAY[0]}|^bash.*${NOME_SCRIPT}$" &
	fi
	redraw_statusbar
}

# 1=PROXIMA MÚSICA; 0=MÚSICA ANTERIOR
tracking_music(){
	[[ $(< "$INDICE") != $1 ]] && echo "$1" > "$INDICE"
	process_kill "1"
}

init_files(){
	# Criando arquivo que conterá todas as músicas da pasta /home/andre/Música - Primeira operação realizada
	[[ ! -e "$LISTA_DE_MUSICAS" ]] && update_songs_list
}

dmenu_options(){
	if [[ -z $MUSICA_TOCANDO ]]
   	then
		MENU_DMENU=("[1] - [Procurar por Música]" "[2] - [Escolher por Músicas por Pasta]" "[3] - [Atualizar lista de Músicas]")
	else
		if (( $(< "$MODULO") ))
		then
			MENU_DMENU=("[$KEY_DMENU_PLAYER_PLAY] - [Play!]" "[$KEY_DMENU_PLAYER_STOP] - [Stop!]" "[$KEY_DMENU_PLAYER_KILL_MUSIC] - [Parar Música!]" "[] - [Playing: \"${MUSICA_TOCANDO##*/}\"]")
		else
			MENU_DMENU=("[$KEY_DMENU_PLAYER_PLAY] - [Play!]" "[$KEY_DMENU_PLAYER_STOP] - [Stop!]" "[$KEY_DMENU_PLAYER_NEXT] - [Próxima Música!]" "[$KEY_DMENU_PLAYER_PREVIOUS] - [Música Anterior!]" "[$KEY_DMENU_PLAYER_QUIT_PLAYLIST] - [Encerrar Playlist!]" "[] - [Playing: \"${MUSICA_TOCANDO##*/}\"]")
		fi
	fi
}

dmenu_lines(){
	if (( ${#MENU_DMENU[@]} < 5 ))
   	then
		LINHAS=5
	else
		LINHAS="${#MENU_DMENU[@]}"
	fi
}

dmenu_main_menu(){
	dmenu_options
	MAIN_MENU=$(dmenu_command_menu "${NOME_SCRIPT^^} - MENU:" "${MENU_DMENU[@]}")
	[[ -z $MAIN_MENU ]] && exit 0
	case "${MAIN_MENU:1:1}" in
		# Toca somente uma  música
		1) 
			playlist_queue "$LISTA_DE_MUSICAS" "1"
			;;
		# Toca músicas de uma pasta
		2) 
			playlist_queue "$PASTAS_COM_MUSICAS" "0"
			;;
		# Atualiza a lista de músicas
		3) 
			update_songs_list
			;;
		# Play
		$KEY_DMENU_PLAYER_PLAY) 
			kill -cont "$ID_MUSICA"
			;;
		# Stop
		$KEY_DMENU_PLAYER_STOP) 
			kill -stop "$ID_MUSICA"
			;;
		# Encerra playlist
		$KEY_DMENU_PLAYER_QUIT_PLAYLIST) 
			process_kill "0"
			;;
		# Next/Eliminar a música atual
		$KEY_DMENU_PLAYER_KILL_MUSIC|$KEY_DMENU_PLAYER_NEXT) 
			tracking_music "1"
			;;
		# Previous
		$KEY_DMENU_PLAYER_PREVIOUS) 
			tracking_music "0"
			;;
		*) 
			notify-send -u critical -t 3250 "${NOME_SCRIPT^^}" "Comando não reconhecido!" & exit 0
			;;
	esac
}

main(){
	init_variables "$0"
	init_files
	dmenu_main_menu
}

main
