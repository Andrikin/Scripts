#!/usr/bin/env bash

# TODO - Fazer um script para download de vídeo ou de audio, Não é mais necessário o arquivo $PASTA_ERRO_LOG

# Script que utiliza os pacotes youtube-dl e ffmpeg para baixar audio do YouTube e converter esse NOME_ARQUIVO para o formato OGG

selecting_link(){
	if [[ $1 != '' ]]
	then
		LINK="$1"
	else
		LINK=$(xsel -o -b)
	fi
}

init_variables(){
	NOME_SCRIPT="${1##*/}"
	CARACTER_PROIBIDO='\/' # Adicionar mais caracteres que não são interpretados pelo comando "mv"
	PASTA_MUSICA="$HOME"/Música/AudiosYouTube

	selecting_link "$2"

	ARQUIVO_FINAL=$(youtube-dl --no-playlist --youtube-skip-dash-manifest --socket-timeout 60 --get-title "$LINK")
	ARQUIVO_TEMP="$PASTA_MUSICA"/audio_temp"$(youtube-dl --no-playlist --youtube-skip-dash-manifest --socket-timeout 60 --get-id "$LINK")"
	# Comando youtube-dl
	DOWNLOAD=(youtube-dl -q --no-playlist --youtube-skip-dash-manifest --socket-timeout 60 -f bestaudio -o "$PASTA_MUSICA/audio_temp%(id)s.%(ext)s" "$LINK")
	FFMPEG_COMMAND=(ffmpeg -i "$ARQUIVO_TEMP".* -q:a 5 "$PASTA_MUSICA/${ARQUIVO_FINAL//[$CARACTER_PROIBIDO]/}".ogg -loglevel quiet)
}

try_again_if_error(){
	((FLAC_LEVEL++))
	[[ $FLAC_LEVEL -lt 5 ]] && "$NOME_SCRIPT" "$LINK"
}

run_ffmpeg(){
	# Quando criar array de comandos, garantir que todas variáveis estejam setadas
	"${FFMPEG_COMMAND[@]}"
}

run_youtube_dl(){
	"${DOWNLOAD[@]}"
}

remove_temp_file(){
	[[ -f $(ls "$ARQUIVO_TEMP".*) ]] && rm "$ARQUIVO_TEMP".*
}

erro_abortar(){
	notify-send -u critical -t 3250 "ERRO!" "Áudio: $ARQUIVO_FINAL - Falhou..."
	remove_temp_file
	try_again_if_error
}

sucesso(){
	notify-send -t 3250 "SUCESSO!" "Áudio: $ARQUIVO_FINAL - Concluído com Sucesso!"
}

main(){
	trap erro_abortar EXIT
	set -e
	# Shell Level
	FLAC_LEVEL=
	init_variables "$0" "$1"
	run_youtube_dl
	run_ffmpeg
	remove_temp_file

	trap sucesso EXIT
}

main "$@"
